name: Chimera CI

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:

env:
  PIP_CACHE_DIR: ${{ github.workspace }}/.cache/pip
  PRE_COMMIT_HOME: ${{ github.workspace }}/.cache/pre-commit

jobs:
  install-deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.6"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            .cache/pip
            .cache/pre-commit
            .venv
          key: poetry-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Install Poetry
        run: pip install poetry==1.8.5 setuptools

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry run python -m pip install -U pip

      - name: Install Dependencies
        run: |
          poetry lock --no-update
          poetry install --no-root

  pre-commit:
    needs: install-deps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.6"

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            .cache/pip
            .cache/pre-commit
            .venv
          key: poetry-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Install Poetry
        run: pip install poetry==1.8.5 setuptools

      - name: Run Pre-Commit Hooks
        run: poetry run pre-commit run -a -v

  pypi-publish:
    needs: pre-commit
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/chimera-distributed-ml
    permissions:
      id-token: write
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12.6"

    - name: Install build and twine
      run: python -m pip install build twine

    - name: Generate dist wheel files
      run: python -m build ${{ github.workspace }}

    - name: Check build
      run: twine check ${{ github.workspace }}/dist/*

    - name: Publish package distributions to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
